(IDENTIFIER, using)
(IDENTIFIER, System)
(SYMBOL, ;)
(IDENTIFIER, using)
(IDENTIFIER, System)
(SYMBOL, .)
(IDENTIFIER, IO)
(SYMBOL, ;)
(IDENTIFIER, using)
(IDENTIFIER, System)
(SYMBOL, .)
(IDENTIFIER, Collections)
(SYMBOL, .)
(IDENTIFIER, Generic)
(SYMBOL, ;)
(COMMENT, /*  
    Scanner for C#

    Scans C# code and breaks up the source code into tokens.

    Author: Nathan Bunch
    Date: 10/1/2018
    Purpose: Project 2, Programming languages Course, Houghton College
 *(SawSlash, /*  
    Scanner for C#

    Scans C# code and breaks up the source code into tokens.

    Author: Nathan Bunch
    Date: 10/1/2018
    Purpose: Project 2, Programming languages Course, Houghton College
 *))
(IDENTIFIER, namespace)
(IDENTIFIER, Scanner)
(IDENTIFIER, Project)
(SYMBOL, {)
(IDENTIFIER, enum)
(IDENTIFIER, StateID)
(SYMBOL, {)
(IDENTIFIER, Start)
(SYMBOL, =)
(NUMBER, 0)
(IDENTIFIER, SawLetter)
(SYMBOL, =)
(NUMBER, 1)
(IDENTIFIER, SawSymbol)
(SYMBOL, =)
(NUMBER, 2)
(IDENTIFIER, SawSlash)
(SYMBOL, =)
(NUMBER, 3)
(IDENTIFIER, SawSingleQuote)
(SYMBOL, =)
(NUMBER, 4)
(IDENTIFIER, SawDoubleQuote)
(SYMBOL, =)
(NUMBER, 5)
(IDENTIFIER, SawAtSymbol)
(SYMBOL, =)
(NUMBER, 6)
(IDENTIFIER, SawAtQuote)
(SYMBOL, =)
(NUMBER, 7)
(IDENTIFIER, SawNumber)
(SYMBOL, =)
(NUMBER, 8)
(IDENTIFIER, SawSpace)
(SYMBOL, =)
(NUMBER, 9)
(IDENTIFIER, SawEscape)
(SYMBOL, =)
(NUMBER, 10)
(SYMBOL, })
(COMMENT, //handle the @"" string
)
(COMMENT, //handle numbers
)
(COMMENT, //handle doubles
)
(IDENTIFIER, enum)
(IDENTIFIER, TokenID)
(SYMBOL, {)
(IDENTIFIER, IDENTIFIER)
(SYMBOL, =)
(NUMBER, 0)
(IDENTIFIER, SYMBOL)
(SYMBOL, =)
(NUMBER, 1)
(IDENTIFIER, STRING)
(SYMBOL, =)
(NUMBER, 3)
(IDENTIFIER, NUMBER)
(SYMBOL, =)
(NUMBER, 4)
(IDENTIFIER, COMMENT)
(SYMBOL, =)
(NUMBER, 5)
(IDENTIFIER, CHAR)
(SYMBOL, =)
(NUMBER, 6)
(SYMBOL, })
(IDENTIFIER, class)
(IDENTIFIER, Token)
(SYMBOL, {)
(IDENTIFIER, string)
(IDENTIFIER, token)
(SYMBOL, =)
(STRING, "")
(SYMBOL, ;)
(IDENTIFIER, TokenID)
(IDENTIFIER, tokenID)
(SYMBOL, ;)
(IDENTIFIER, public)
(IDENTIFIER, Token)
(SYMBOL, ()
(IDENTIFIER, TokenID)
(IDENTIFIER, tokenID)
(SYMBOL, ,)
(IDENTIFIER, string)
(IDENTIFIER, token)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, this)
(SYMBOL, .)
(IDENTIFIER, tokenID)
(SYMBOL, =)
(IDENTIFIER, tokenID)
(SYMBOL, ;)
(IDENTIFIER, this)
(SYMBOL, .)
(IDENTIFIER, token)
(SYMBOL, =)
(IDENTIFIER, token)
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, override)
(IDENTIFIER, public)
(IDENTIFIER, string)
(IDENTIFIER, ToString)
(SYMBOL, ())
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, tokenID)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, (),)
(IDENTIFIER, token)
(SYMBOL, ).)
(IDENTIFIER, ToString)
(SYMBOL, ();)
(SYMBOL, })
(SYMBOL, })
(IDENTIFIER, class)
(IDENTIFIER, State)
(SYMBOL, {)
(IDENTIFIER, string)
(IDENTIFIER, data)
(SYMBOL, =)
(STRING, "")
(SYMBOL, ;)
(IDENTIFIER, StateID)
(IDENTIFIER, stateID)
(SYMBOL, ;)
(IDENTIFIER, bool)
(IDENTIFIER, isComment)
(SYMBOL, =)
(IDENTIFIER, false)
(SYMBOL, ;)
(IDENTIFIER, bool)
(IDENTIFIER, at)
(SYMBOL, =)
(IDENTIFIER, false)
(SYMBOL, ;)
(IDENTIFIER, bool)
(IDENTIFIER, extraSwitch)
(SYMBOL, =)
(IDENTIFIER, false)
(SYMBOL, ;)
(IDENTIFIER, public)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(IDENTIFIER, stateID)
(SYMBOL, ,)
(IDENTIFIER, string)
(IDENTIFIER, data)
(SYMBOL, ,)
(IDENTIFIER, bool)
(IDENTIFIER, at)
(SYMBOL, =)
(IDENTIFIER, false)
(SYMBOL, ,)
(IDENTIFIER, bool)
(IDENTIFIER, isComment)
(SYMBOL, =)
(IDENTIFIER, false)
(SYMBOL, ,)
(IDENTIFIER, bool)
(IDENTIFIER, extra)
(SYMBOL, =)
(IDENTIFIER, false)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, this)
(SYMBOL, .)
(IDENTIFIER, stateID)
(SYMBOL, =)
(IDENTIFIER, stateID)
(SYMBOL, ;)
(IDENTIFIER, this)
(SYMBOL, .)
(IDENTIFIER, data)
(SYMBOL, =)
(IDENTIFIER, data)
(SYMBOL, ;)
(IDENTIFIER, this)
(SYMBOL, .)
(IDENTIFIER, at)
(SYMBOL, =)
(IDENTIFIER, at)
(SYMBOL, ;)
(IDENTIFIER, this)
(SYMBOL, .)
(IDENTIFIER, isComment)
(SYMBOL, =)
(IDENTIFIER, isComment)
(SYMBOL, ;)
(IDENTIFIER, this)
(SYMBOL, .)
(IDENTIFIER, extraSwitch)
(SYMBOL, =)
(IDENTIFIER, extra)
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, public)
(IDENTIFIER, StateID)
(IDENTIFIER, name)
(SYMBOL, ())
(SYMBOL, {)
(IDENTIFIER, return)
(IDENTIFIER, stateID)
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, public)
(IDENTIFIER, bool)
(IDENTIFIER, Comment)
(SYMBOL, ())
(SYMBOL, {)
(IDENTIFIER, return)
(IDENTIFIER, isComment)
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, public)
(IDENTIFIER, bool)
(IDENTIFIER, At)
(SYMBOL, ())
(SYMBOL, {)
(IDENTIFIER, return)
(IDENTIFIER, at)
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, public)
(IDENTIFIER, string)
(IDENTIFIER, acc)
(SYMBOL, ())
(SYMBOL, {)
(IDENTIFIER, return)
(IDENTIFIER, data)
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, public)
(IDENTIFIER, bool)
(IDENTIFIER, Extra)
(SYMBOL, ())
(SYMBOL, {)
(IDENTIFIER, return)
(IDENTIFIER, extraSwitch)
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, override)
(IDENTIFIER, public)
(IDENTIFIER, string)
(IDENTIFIER, ToString)
(SYMBOL, ())
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, stateID)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, (),)
(IDENTIFIER, data)
(SYMBOL, ).)
(IDENTIFIER, ToString)
(SYMBOL, ();)
(SYMBOL, })
(SYMBOL, })
(IDENTIFIER, class)
(IDENTIFIER, Program)
(SYMBOL, {)
(IDENTIFIER, public)
(IDENTIFIER, static)
(IDENTIFIER, bool)
(IDENTIFIER, isLetter)
(SYMBOL, ()
(IDENTIFIER, char)
(IDENTIFIER, c)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, var)
(IDENTIFIER, letters)
(SYMBOL, =)
(STRING, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")
(SYMBOL, ;)
(IDENTIFIER, return)
(IDENTIFIER, letters)
(SYMBOL, .)
(IDENTIFIER, Contains)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, );)
(SYMBOL, })
(IDENTIFIER, public)
(IDENTIFIER, static)
(IDENTIFIER, bool)
(IDENTIFIER, isSymbol)
(SYMBOL, ()
(IDENTIFIER, char)
(IDENTIFIER, c)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, var)
(IDENTIFIER, symbols)
(SYMBOL, =)
(STRING, "~!#$%^&*<>,.?\\|;:+=()[]{}")
(SYMBOL, ;)
(IDENTIFIER, return)
(IDENTIFIER, symbols)
(SYMBOL, .)
(IDENTIFIER, Contains)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, );)
(SYMBOL, })
(IDENTIFIER, public)
(IDENTIFIER, static)
(IDENTIFIER, bool)
(IDENTIFIER, isNumber)
(SYMBOL, ()
(IDENTIFIER, char)
(IDENTIFIER, c)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, var)
(IDENTIFIER, numbers)
(SYMBOL, =)
(STRING, "1234567890")
(SYMBOL, ;)
(IDENTIFIER, return)
(IDENTIFIER, numbers)
(SYMBOL, .)
(IDENTIFIER, Contains)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, );)
(SYMBOL, })
(IDENTIFIER, public)
(IDENTIFIER, static)
(IDENTIFIER, bool)
(IDENTIFIER, isPeriod)
(SYMBOL, ()
(IDENTIFIER, char)
(IDENTIFIER, c)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, return)
(IDENTIFIER, c)
(SYMBOL, =)
(SYMBOL, =)
(CHAR, '.')
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, public)
(IDENTIFIER, static)
(IDENTIFIER, bool)
(IDENTIFIER, isAt)
(SYMBOL, ()
(IDENTIFIER, char)
(IDENTIFIER, c)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, return)
(IDENTIFIER, c)
(SYMBOL, =)
(SYMBOL, =)
(CHAR, '@')
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, public)
(IDENTIFIER, static)
(IDENTIFIER, bool)
(IDENTIFIER, isSingleQuote)
(SYMBOL, ()
(IDENTIFIER, char)
(IDENTIFIER, c)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, return)
(IDENTIFIER, c)
(SYMBOL, =)
(SYMBOL, =)
(CHAR, '\'')
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, public)
(IDENTIFIER, static)
(IDENTIFIER, bool)
(IDENTIFIER, isDoubleQuote)
(SYMBOL, ()
(IDENTIFIER, char)
(IDENTIFIER, c)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, return)
(IDENTIFIER, c)
(SYMBOL, =)
(SYMBOL, =)
(CHAR, '"')
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, public)
(IDENTIFIER, static)
(IDENTIFIER, bool)
(IDENTIFIER, isSlash)
(SYMBOL, ()
(IDENTIFIER, char)
(IDENTIFIER, c)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, return)
(IDENTIFIER, c)
(SYMBOL, =)
(SYMBOL, =)
(CHAR, '/')
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, public)
(IDENTIFIER, static)
(IDENTIFIER, bool)
(IDENTIFIER, isAsterisk)
(SYMBOL, ()
(IDENTIFIER, char)
(IDENTIFIER, c)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, return)
(IDENTIFIER, c)
(SYMBOL, =)
(SYMBOL, =)
(CHAR, '*')
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, public)
(IDENTIFIER, static)
(IDENTIFIER, bool)
(IDENTIFIER, isNewLine)
(SYMBOL, ()
(IDENTIFIER, char)
(IDENTIFIER, c)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, return)
(IDENTIFIER, c)
(SYMBOL, =)
(SYMBOL, =)
(CHAR, '\n')
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, public)
(IDENTIFIER, static)
(IDENTIFIER, bool)
(IDENTIFIER, isEscape)
(SYMBOL, ()
(IDENTIFIER, char)
(IDENTIFIER, c)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, return)
(IDENTIFIER, c)
(SYMBOL, =)
(SYMBOL, =)
(CHAR, '\\')
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, public)
(IDENTIFIER, static)
(IDENTIFIER, void)
(IDENTIFIER, engine)
(SYMBOL, ()
(IDENTIFIER, StreamReader)
(IDENTIFIER, sr)
(SYMBOL, ,)
(IDENTIFIER, String)
(IDENTIFIER, fn)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, State)
(IDENTIFIER, s)
(SYMBOL, =)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, Start)
(SYMBOL, ,)
(STRING, "")
(SYMBOL, ))
(SYMBOL, ;)
(IDENTIFIER, var)
(IDENTIFIER, s)
(SYMBOL, =)
(IDENTIFIER, s)
(SYMBOL, ;)
(IDENTIFIER, char)
(IDENTIFIER, c)
(SYMBOL, ;)
(SYMBOL, ()
(IDENTIFIER, Token)
(SYMBOL, ,)
(IDENTIFIER, State)
(SYMBOL, ))
(IDENTIFIER, ts)
(SYMBOL, ;)
(IDENTIFIER, Token)
(IDENTIFIER, t)
(SYMBOL, ;)
(IDENTIFIER, StreamWriter)
(IDENTIFIER, wr)
(SYMBOL, =)
(IDENTIFIER, new)
(IDENTIFIER, StreamWriter)
(SYMBOL, ()
(IDENTIFIER, fn)
(SYMBOL, +)
(STRING, @"read_out.txt")
(SYMBOL, ))
(SYMBOL, ;)
(IDENTIFIER, var)
(IDENTIFIER, count)
(SYMBOL, =)
(NUMBER, 0)
(IDENTIFIER, while)
(SYMBOL, (!)
(IDENTIFIER, sr)
(SYMBOL, .)
(IDENTIFIER, EndOfStream)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, c)
(SYMBOL, =)
(SYMBOL, ()
(IDENTIFIER, char)
(SYMBOL, ))
(IDENTIFIER, sr)
(SYMBOL, .)
(IDENTIFIER, Read)
(SYMBOL, ();)
(IDENTIFIER, ts)
(SYMBOL, =)
(IDENTIFIER, prog)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, );)
(IDENTIFIER, t)
(SYMBOL, =)
(IDENTIFIER, ts)
(SYMBOL, .)
(IDENTIFIER, Item)
(SYMBOL, ;)
(IDENTIFIER, s)
(SYMBOL, =)
(IDENTIFIER, ts)
(SYMBOL, .)
(IDENTIFIER, Item)
(SYMBOL, ;)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, t)
(SYMBOL, !)
(SYMBOL, =)
(IDENTIFIER, null)
(SYMBOL, ))
(IDENTIFIER, wr)
(SYMBOL, .)
(IDENTIFIER, WriteLine)
(SYMBOL, ()
(IDENTIFIER, t)
(SYMBOL, );)
(IDENTIFIER, count)
(SYMBOL, +)
(SYMBOL, =)
(NUMBER, 1)
(COMMENT, //Console.WriteLine(t);
)
(COMMENT, //ts = prog('\0', s);
)
(COMMENT, //t = ts.Item1;
)
(COMMENT, //s = ts.Item2;
)
(COMMENT, //if(t != null)
)
(COMMENT, //    Console.WriteLine(t);
)
(SYMBOL, })
(IDENTIFIER, Console)
(SYMBOL, .)
(IDENTIFIER, WriteLine)
(SYMBOL, ()
(IDENTIFIER, Done)
(SYMBOL, .)
(SYMBOL, {)
(NUMBER, 0)
(IDENTIFIER, tokens)
(IDENTIFIER, extracted)
(SYMBOL, .)
(SYMBOL, ,)
(IDENTIFIER, count)
(SYMBOL, );)
(IDENTIFIER, wr)
(SYMBOL, .)
(IDENTIFIER, Close)
(SYMBOL, ();)
(SYMBOL, })
(IDENTIFIER, public)
(IDENTIFIER, static)
(SYMBOL, ()
(IDENTIFIER, Token)
(SYMBOL, ,)
(IDENTIFIER, State)
(SYMBOL, ))
(IDENTIFIER, prog)
(SYMBOL, ()
(IDENTIFIER, char)
(IDENTIFIER, c)
(SYMBOL, ,)
(IDENTIFIER, State)
(IDENTIFIER, s)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, name)
(SYMBOL, ())
(SYMBOL, =)
(SYMBOL, =)
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, Start)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, isLetter)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, )))
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, null)
(SYMBOL, ,)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawLetter)
(SYMBOL, ,)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, ()));)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, isSymbol)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, )))
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, new)
(IDENTIFIER, Token)
(SYMBOL, ()
(IDENTIFIER, TokenID)
(SYMBOL, .)
(IDENTIFIER, SYMBOL)
(SYMBOL, ,)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, ()),)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, Start)
(SYMBOL, ,)
(STRING, "")
(SYMBOL, ))
(SYMBOL, ))
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, isAt)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, )))
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, null)
(SYMBOL, ,)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawAtSymbol)
(SYMBOL, ,)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, ()));)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, isSingleQuote)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, )))
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, null)
(SYMBOL, ,)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawSingleQuote)
(SYMBOL, ,)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, ()));)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, isDoubleQuote)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, )))
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, null)
(SYMBOL, ,)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawDoubleQuote)
(SYMBOL, ,)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, (),)
(IDENTIFIER, false)
(SYMBOL, ,)
(IDENTIFIER, true)
(SYMBOL, ));)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, isNumber)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, )))
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, null)
(SYMBOL, ,)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawNumber)
(SYMBOL, ,)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, ()));)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, isSlash)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, )))
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, null)
(SYMBOL, ,)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawSlash)
(SYMBOL, ,)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, ()));)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, isEscape)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, )))
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, null)
(SYMBOL, ,)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawEscape)
(SYMBOL, ,)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, ()));)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, null)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, );)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, name)
(SYMBOL, ())
(SYMBOL, =)
(SYMBOL, =)
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawLetter)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, isLetter)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, )))
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, null)
(SYMBOL, ,)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawLetter)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ())
(SYMBOL, +)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, ()));)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, isSymbol)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, )))
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, new)
(IDENTIFIER, Token)
(SYMBOL, ()
(IDENTIFIER, TokenID)
(SYMBOL, .)
(IDENTIFIER, IDENTIFIER)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ()),)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawSymbol)
(SYMBOL, ,)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, ()));)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, new)
(IDENTIFIER, Token)
(SYMBOL, ()
(IDENTIFIER, TokenID)
(SYMBOL, .)
(IDENTIFIER, IDENTIFIER)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ()),)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, Start)
(SYMBOL, ,)
(STRING, "")
(SYMBOL, ))
(SYMBOL, ))
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, name)
(SYMBOL, ())
(SYMBOL, =)
(SYMBOL, =)
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawSymbol)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, isLetter)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, )))
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, new)
(IDENTIFIER, Token)
(SYMBOL, ()
(IDENTIFIER, TokenID)
(SYMBOL, .)
(IDENTIFIER, SYMBOL)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ()),)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawLetter)
(SYMBOL, ,)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, ()));)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, isSymbol)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, )))
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, null)
(SYMBOL, ,)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawSymbol)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ())
(SYMBOL, +)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, ()));)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, new)
(IDENTIFIER, Token)
(SYMBOL, ()
(IDENTIFIER, TokenID)
(SYMBOL, .)
(IDENTIFIER, SYMBOL)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ()),)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, Start)
(SYMBOL, ,)
(STRING, "")
(SYMBOL, ))
(SYMBOL, ))
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, name)
(SYMBOL, ())
(SYMBOL, =)
(SYMBOL, =)
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawAtSymbol)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, isDoubleQuote)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, ))
(SYMBOL, &)
(SYMBOL, &)
(SYMBOL, !)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, At)
(SYMBOL, ()))
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, null)
(SYMBOL, ,)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawDoubleQuote)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ())
(SYMBOL, +)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, (),)
(IDENTIFIER, true)
(SYMBOL, ));)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, new)
(IDENTIFIER, Token)
(SYMBOL, ()
(IDENTIFIER, TokenID)
(SYMBOL, .)
(IDENTIFIER, SYMBOL)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ()),)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, Start)
(SYMBOL, ,)
(STRING, "")
(SYMBOL, ))
(SYMBOL, ))
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, name)
(SYMBOL, ())
(SYMBOL, =)
(SYMBOL, =)
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawDoubleQuote)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, At)
(SYMBOL, ())
(SYMBOL, &)
(SYMBOL, &)
(SYMBOL, !)
(IDENTIFIER, isDoubleQuote)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, )))
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, null)
(SYMBOL, ,)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawDoubleQuote)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ())
(SYMBOL, +)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, ()));)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, name)
(SYMBOL, ())
(SYMBOL, =)
(SYMBOL, =)
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawDoubleQuote)
(SYMBOL, &)
(SYMBOL, &)
(IDENTIFIER, isDoubleQuote)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, )))
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, new)
(IDENTIFIER, Token)
(SYMBOL, ()
(IDENTIFIER, TokenID)
(SYMBOL, .)
(IDENTIFIER, STRING)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ())
(SYMBOL, +)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, ()),)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, Start)
(SYMBOL, ,)
(STRING, "")
(SYMBOL, ))
(SYMBOL, ))
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, null)
(SYMBOL, ,)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawDoubleQuote)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ())
(SYMBOL, +)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, ()));)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, name)
(SYMBOL, ())
(SYMBOL, =)
(SYMBOL, =)
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawNumber)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, isNumber)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, ))
(SYMBOL, |)
(SYMBOL, |)
(IDENTIFIER, isPeriod)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, )))
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, null)
(SYMBOL, ,)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawNumber)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ())
(SYMBOL, +)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, ()));)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, new)
(IDENTIFIER, Token)
(SYMBOL, ()
(IDENTIFIER, TokenID)
(SYMBOL, .)
(IDENTIFIER, NUMBER)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ()),)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, Start)
(SYMBOL, ,)
(STRING, "")
(SYMBOL, ))
(SYMBOL, ))
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, name)
(SYMBOL, ())
(SYMBOL, =)
(SYMBOL, =)
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawSlash)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, isAsterisk)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, )))
(SYMBOL, {)
(IDENTIFIER, if)
(SYMBOL, (!)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, Extra)
(SYMBOL, ()))
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, null)
(SYMBOL, ,)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawSlash)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ())
(SYMBOL, +)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, (),)
(IDENTIFIER, true)
(SYMBOL, ,)
(IDENTIFIER, true)
(SYMBOL, ,)
(IDENTIFIER, true)
(SYMBOL, ));)
(IDENTIFIER, else)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, null)
(SYMBOL, ,)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawSlash)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ())
(SYMBOL, +)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, (),)
(IDENTIFIER, false)
(SYMBOL, ,)
(IDENTIFIER, true)
(SYMBOL, ,)
(IDENTIFIER, true)
(SYMBOL, ));)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, isSlash)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, ))
(SYMBOL, &)
(SYMBOL, &)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, Comment)
(SYMBOL, ())
(SYMBOL, &)
(SYMBOL, &)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, Extra)
(SYMBOL, ())
(SYMBOL, &)
(SYMBOL, &)
(SYMBOL, !)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, At)
(SYMBOL, ()))
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, new)
(IDENTIFIER, Token)
(SYMBOL, ()
(IDENTIFIER, TokenID)
(SYMBOL, .)
(IDENTIFIER, COMMENT)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ())
(SYMBOL, +)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, ()),)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, Start)
(SYMBOL, ,)
(STRING, "")
(SYMBOL, ))
(SYMBOL, ))
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, isSlash)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, ))
(SYMBOL, &)
(SYMBOL, &)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, Comment)
(SYMBOL, ())
(SYMBOL, &)
(SYMBOL, &)
(SYMBOL, !)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, Extra)
(SYMBOL, ()))
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, null)
(SYMBOL, ,)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawSlash)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ())
(SYMBOL, +)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, (),)
(IDENTIFIER, true)
(SYMBOL, ,)
(IDENTIFIER, true)
(SYMBOL, ));)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, isNewLine)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, ))
(SYMBOL, &)
(SYMBOL, &)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, Comment)
(SYMBOL, ())
(SYMBOL, &)
(SYMBOL, &)
(SYMBOL, !)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, Extra)
(SYMBOL, ()))
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, new)
(IDENTIFIER, Token)
(SYMBOL, ()
(IDENTIFIER, TokenID)
(SYMBOL, .)
(IDENTIFIER, COMMENT)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ())
(SYMBOL, +)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, ()),)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, Start)
(SYMBOL, ,)
(STRING, "")
(SYMBOL, ))
(SYMBOL, ))
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, null)
(SYMBOL, ,)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawSlash)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ())
(SYMBOL, +)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, (),)
(IDENTIFIER, true)
(SYMBOL, ,)
(IDENTIFIER, true)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, Extra)
(SYMBOL, ()));)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, name)
(SYMBOL, ())
(SYMBOL, =)
(SYMBOL, =)
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawEscape)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, new)
(IDENTIFIER, Token)
(SYMBOL, ()
(IDENTIFIER, TokenID)
(SYMBOL, .)
(IDENTIFIER, SYMBOL)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ())
(SYMBOL, +)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, ()),)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, Start)
(SYMBOL, ,)
(STRING, "")
(SYMBOL, ))
(SYMBOL, ))
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, name)
(SYMBOL, ())
(SYMBOL, =)
(SYMBOL, =)
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawSingleQuote)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, isSingleQuote)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, ))
(SYMBOL, &)
(SYMBOL, &)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ()[)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ().)
(IDENTIFIER, Length)
(NUMBER, 1)
(SYMBOL, !)
(SYMBOL, =)
(CHAR, '\\')
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, new)
(IDENTIFIER, Token)
(SYMBOL, ()
(IDENTIFIER, TokenID)
(SYMBOL, .)
(IDENTIFIER, CHAR)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ())
(SYMBOL, +)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, ()),)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, Start)
(SYMBOL, ,)
(STRING, "")
(SYMBOL, ))
(SYMBOL, ))
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, if)
(SYMBOL, ()
(IDENTIFIER, isSingleQuote)
(SYMBOL, ()
(IDENTIFIER, c)
(SYMBOL, ))
(SYMBOL, &)
(SYMBOL, &)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ()[)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ().)
(IDENTIFIER, Length)
(NUMBER, 2)
(SYMBOL, =)
(SYMBOL, =)
(CHAR, '\\')
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, new)
(IDENTIFIER, Token)
(SYMBOL, ()
(IDENTIFIER, TokenID)
(SYMBOL, .)
(IDENTIFIER, CHAR)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ())
(SYMBOL, +)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, ()),)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, Start)
(SYMBOL, ,)
(STRING, "")
(SYMBOL, ))
(SYMBOL, ))
(SYMBOL, ;)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, null)
(SYMBOL, ,)
(IDENTIFIER, new)
(IDENTIFIER, State)
(SYMBOL, ()
(IDENTIFIER, StateID)
(SYMBOL, .)
(IDENTIFIER, SawSingleQuote)
(SYMBOL, ,)
(IDENTIFIER, s)
(SYMBOL, .)
(IDENTIFIER, acc)
(SYMBOL, ())
(SYMBOL, +)
(IDENTIFIER, c)
(SYMBOL, .)
(IDENTIFIER, ToString)
(SYMBOL, ()));)
(SYMBOL, })
(IDENTIFIER, else)
(IDENTIFIER, return)
(SYMBOL, ()
(IDENTIFIER, null)
(SYMBOL, ,)
(IDENTIFIER, null)
(SYMBOL, );)
(SYMBOL, })
(IDENTIFIER, static)
(IDENTIFIER, void)
(IDENTIFIER, Main)
(SYMBOL, ()
(IDENTIFIER, string)
(SYMBOL, [])
(IDENTIFIER, args)
(SYMBOL, ))
(SYMBOL, {)
(IDENTIFIER, string)
(IDENTIFIER, file)
(SYMBOL, =)
(IDENTIFIER, args)
(SYMBOL, [)
(SYMBOL, ])
(SYMBOL, ;)
(IDENTIFIER, engine)
(SYMBOL, ()
(IDENTIFIER, new)
(IDENTIFIER, StreamReader)
(SYMBOL, ()
(IDENTIFIER, file)
(SYMBOL, ),)
(IDENTIFIER, file)
(SYMBOL, );)
(SYMBOL, })
(SYMBOL, })
(SYMBOL, })
